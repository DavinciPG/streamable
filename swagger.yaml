openapi: 3.0.2
info:
  title: ITA21
  version: 1.0.0
  description: Demonstration API
paths:
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `Session` entities. This path
      contains a `POST` operation to create sessions and a `DELETE` operation to destroy sessions.
    post:
      requestBody:
        description: A new `Session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      tags:
        - Sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                Session:
                  value:
                    userId: 123
          description: Successful sign in.
      operationId: createSession
      summary: Create a Session
      description: Creates a new instance of a `Session`.
    delete:
      tags:
        - Sessions
      responses:
        '204':
          description: Successful signout
      security:
        - Bearer: []
      summary: Destroy a session
      description: 'Destroys a `Session`, effectively signing out.'
  /users:
    summary: Path used to create users.
    description: >-
      The REST endpoint/path used to create user entities. This path contains a `PUT` operation to create users.
    put:
      requestBody:
        description: A new `User` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      tags:
        - Users
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              examples:
                User:
                  value:
                    userId: 841959fa-b0b9-4185-8673-1531c59cd6c9
          description: Successful sign up.
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of a `User`.
  /session:
    summary: Path used to manage user sessions.
    description: >-
      The REST endpoint/path used to interact with user sessions. This path contains a `GET` operation to retrieve the current session.
    get:
      tags:
        - Sessions
      summary: Get Current Session
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                Session:
                  value:
                    userId: 841959fa-b0b9-4185-8673-1531c59cd6c9
        '204':
          description: No session found
        '401':
          description: Unauthorized
  /videos:
    summary: Path used to manage user videos.
    description: >-
      The REST endpoint/path used to interact with user videos. This path contains a `GET` operation to retrieve user videos and a `PUT` operation to upload new videos.
    get:
      tags:
        - Videos
      summary: List User Videos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Videos'
              examples:
                Videos:
                  value:
                    - { video1 data }
                    - { video2 data }
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    put:
      requestBody:
        description: A new video to be uploaded.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoUpload'
        tags:
          - Videos
        responses:
          '201':
            description: Video uploaded successfully.
          '400':
            description: Bad Request
          '401':
            description: Unauthorized
          '500':
            description: Internal Server Error
  '/video/{id}':
    summary: Path used to manage individual user videos.
    description: >-
      The REST endpoint/path used to interact with individual user videos. This path contains a `GET` operation to retrieve a video, a `DELETE` operation to delete a video, and a `PUT` operation to toggle video privacy.
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: The unique ID of the video.
    get:
      tags:
        - Videos
      summary: Get Video
      responses:
        '200':
          description: Successful response
          content:
            video/mp4:
              schema:
                type: string
                format: binary
          '401':
            description: Unauthorized
          '403':
            description: Video is private
          '500':
            description: Internal Server Error
    delete:
      tags:
        - Videos
      summary: Delete Video
      responses:
        '204':
          description: Video deleted successfully
        '403':
          description: Unauthorized
        '500':
          description: Internal Server Error
    put:
      tags:
        - Videos
      summary: Toggle Video Privacy
      requestBody:
        description: Video privacy settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivacyToggle'
        responses:
          '201':
            description: Video privacy changed successfully.
          '401':
            description: Unauthorized
          '500':
            description: Internal Server Error
components:
  schemas:
    Credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: admin@example.com
        password: '1234'
    Session:
      type: object
      properties:
        userId:
          type: string
      example:
        userId: 841959fa-b0b9-4185-8673-1531c59cd6c9
    Users:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        passwordconfirm:
          type: string
      example:
        email: admin@admin.com
        password: admin
        passwordconfirm: admin
    Videos:
      type: array
      items:
        type: string
    VideoUpload:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        privatevid:
          type: boolean
        videoFile:
          type: string
        format: binary
    PrivacyToggle:
      type: object
      properties:
        isprivate:
          type: boolean
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
tags:
  -
    name: Sessions
    description: Operations with sessions
  -
    name: Users
    description: Operations with users
  -
    name: Videos
    description: Operations with videos
